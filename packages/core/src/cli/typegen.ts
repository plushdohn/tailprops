import { existsSync, mkdirSync, writeFileSync } from "fs";
import path from "path";
import prompts from "prompts";
import resolveConfig from "tailwindcss/resolveConfig";
import { getActualConfigFromConfigSource, readConfigFile } from "./config";
import typeFunctions from "./frameworks";
import { logBad, logDiff, logGood, logStep } from "./logger";

const TAILPROPS_TYPES_SIGNATURE = `/**
 * These types were generated by the tailprops CLI. 
 *
 * You can edit them if you want, but they will be overwritten 
 * the next time you or someone else run the CLI.
 * 
 * If you have updated your Tailwind theme and you want these types 
 * to reflect those changes run \`npx tailprops typegen <framework>\`.
 */
`;

export async function typegenCommand(framework: string) {
  logStep(`Generating types for ${framework}...`);

  const { directory } = await prompts({
    type: "text",
    name: "directory",
    message: "In which folder should we save the types? (default: current)",
    initial: ".",
  });

  const isAstro = framework === "astro";

  if (isAstro) {
    const { astroIntegrations } = await prompts({
      type: "multiselect",
      name: "astroIntegrations",
      message: "Which Astro integrations would you like to use?",
      choices: [
        { title: "React", value: "react" },
        { title: "Preact", value: "preact" },
      ],
      instructions: false,
    });

    for (const integration of astroIntegrations) {
      try {
        writeTypes(integration, directory, integration);
      } catch (e) {
        process.exitCode = 1;
        return logBad("Oops: " + (e as Error).message);
      }
    }
  } else {
    try {
      writeTypes(framework, directory, "tailprops");
    } catch (e) {
      process.exitCode = 1;
      return logBad("Oops: " + (e as Error).message);
    }
  }

  logGood("Types created!");

  const { changeTsConfig } = await prompts({
    type: "confirm",
    name: "changeTsConfig",
    message: "Include the generated types in your tsconfig.json?",
    initial: true,
  });

  if (changeTsConfig) {
    const { original, modified } = applyTypesToTsConfig(
      isAstro ? directory : path.join(directory, "tailprops.d.ts")
    );

    logDiff(original, modified, "tsconfig.json");

    const { configConfirm } = await prompts({
      type: "confirm",
      name: "configConfirm",
      initial: true,
      message: "These changes will be applied to your tsconfig.json, confirm?",
    });

    if (configConfirm) {
      writeFileSync("tsconfig.json", modified);
    }
  }

  return logGood("Done! You're all set.");
}

function writeTypes(framework: string, directory: string, fileName: string) {
  const typegenFunction = typeFunctions[framework];

  if (!typegenFunction) {
    throw new Error(`Unsupported framework '${framework}'`);
  }

  const filePath = `${directory}/${fileName}.d.ts`;

  if (!existsSync(directory)) {
    mkdirSync(directory, { recursive: true });
  }

  const resolvedTheme = getResolvedTailwindTheme();

  const themeTypes = getTypeStringFromResolvedTheme(resolvedTheme);

  writeFileSync(
    filePath,
    `${TAILPROPS_TYPES_SIGNATURE}${typegenFunction(themeTypes)}`
  );
}

function applyTypesToTsConfig(filePath: string) {
  const tsConfig = require(path.join(process.cwd(), "tsconfig.json"));

  const original = JSON.stringify(tsConfig, null, 2);

  if (!tsConfig.include) tsConfig.include = [];

  tsConfig.include.push(filePath);

  return { original, modified: JSON.stringify(tsConfig, null, 2) };
}

function getResolvedTailwindTheme() {
  const configFile = readConfigFile();

  const config = getActualConfigFromConfigSource(configFile.source);

  return resolveConfig(config as any).theme;
}

function getTypeStringFromResolvedTheme(theme: any) {
  const VARIANTS_TO_GENERATE = [
    "hover",
    "focus",
    "active",
    "disabled",
    "group-hover",
    "group-focus",
    "group-active",
    "group-disabled",
  ];

  const types: string[] = ["tw?: string;"];

  const entries = {
    ...theme.screens,
  };

  for (const key of [...VARIANTS_TO_GENERATE, ...Object.keys(entries)]) {
    types.push(`"tw-${key.replace("-", "_")}"?: string;`);
  }

  return types.join("\n");
}
